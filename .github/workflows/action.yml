name: Build and deploy npm package

on:
  workflow_call:
    inputs:
      node_version:
        description: 'Node.js version to use for the build'
        required: false
        type: string
        default: '18.x'

      package_manager:
        description: 'Package manager to use (npm or yarn)'
        required: false
        type: string
        default: 'npm'

      path_to_package_json:
        description: 'Path to package.json file'
        required: false
        type: string
        default: './package.json'

      path_to_package_lock:
        description: 'Path to package-lock.json or yarn.lock file'
        required: false
        type: string
        default: 'package-lock.json'

      registry_url:
        description: 'URL of the npm registry to publish to'
        required: true
        type: string

      install_command:
        description: 'Command to install dependencies'
        required: false
        type: string
        default: 'npm ci'

      build_command:
        description: 'Command to build the package'
        required: false
        type: string
        default: 'npm run build'

      build_output_path:
        description: 'Path to the build output directory'
        required: false
        type: string
        default: 'dist'

      version_command:
        description: 'Command to create a version of the package'
        required: true
        type: string
      
      publish_command:
        description: 'Command to publish the package'
        required: true
        type: string

      is_pre_release:
        description: 'Indicates if the deployment is a pre-release'
        required: false
        type: boolean
        default: false

      pre_release_branch_name:
        description: 'Branch name for pre-release deployment'
        required: false
        type: string
        default: 'dev'

      release_branch_name:
        description: 'Branch name for release deployment'
        required: false
        type: string
        default: 'main'

jobs:
  check-deployment-branch:
    name: Check deployment branch
    outputs:
      is_valid_branch: ${{ steps.check_branch.outputs.is_valid_branch }}
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - name: Check deployment branch
      id: check_branch
      run: |
        branch_name="${{ github.ref_name }}"
        pre_release_branch_name="${{ inputs.pre_release_branch_name }}"
        release_branch_name="${{ inputs.release_branch_name }}"
        is_pre_release_branch=${{ github.ref_name == inputs.pre_release_branch_name && inputs.is_pre_release == 'true' }}

        echo "Pre-release branch: $pre_release_branch_name"
        echo "Release branch: $release_branch_name"
        echo "Current branch: $branch_name"
        echo "is a Pre-release: $is_pre_release_branch"

        if { [[ "$branch_name" == "$pre_release_branch_name" && "$is_pre_release_branch" == "true" ]] || [[ "$branch_name" == "$release_branch_name" && "$is_pre_release_branch" == "false" ]]; }; then
          echo "This workflow is running on a valid branch ($branch_name)."
          echo "Pre-release branch: $pre_release_branch_name"

          echo "is_valid_branch=true" >> $GITHUB_OUTPUT
        else
          echo "Please switch to one of the valid branches to run this workflow for the Pre-release state."
          
          echo "is_valid_branch=false" >> $GITHUB_OUTPUT
          exit 1
        fi
  
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: check-deployment-branch
    if: needs.check-deployment-branch.outputs.is_valid_branch == 'true'

    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
      
    - name: Set up Node.js ${{ inputs.node_version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node_version }}
        cache: ${{ inputs.package_manager }}
        cache-dependency-path: ${{ inputs.path_to_package_lock }}
    
    - name: Install dependencies
      run: ${{ inputs.install_command }}
    
    - name: Build
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-output
        path: ${{ inputs.build_output_path }}
        retention-days: 2

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: build

    permissions:
      contents: write
      packages: write

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js ${{ inputs.node_version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node_version }}
        cache: ${{ inputs.package_manager }}
        cache-dependency-path: ${{ inputs.path_to_package_lock }}
        registry-url: ${{ inputs.registry_url }}

    - name: Get package version prior to publishing
      id: initial-package-version
      run: |
        path_to_package_json=${{ inputs.path_to_package_json }}
        PACKAGE_VERSION=$(node -p "require('$path_to_package_json').version")
        echo "package version: $PACKAGE_VERSION"
        echo "PACKAGE_VERSION=$PACKAGE_VERSION " >> $GITHUB_OUTPUT

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-output
        path: ${{ inputs.build_output_path }}

    - name: Setup git user info
      run: | 
        git config user.name "github-actions[bot]"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"   

    - name: Create version
      run: ${{ inputs.version_command }}

    - name: Get package version
      id: package-version
      run: |
        path_to_package_json=${{ inputs.path_to_package_json }}
        PACKAGE_VERSION=$(node -p "require('$path_to_package_json').version")
        echo "package version: $PACKAGE_VERSION"
        echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_OUTPUT

    - name: Check if version was created
      run: |
        if [ ${{ steps.initial-package-version.outputs.PACKAGE_VERSION }} == ${{ steps.package-version.outputs.PACKAGE_VERSION}} ]; then
          echo "No new version created. Exiting with error."
          echo "Initial version: ${{ steps.initial-package-version.outputs.PACKAGE_VERSION }}"
          echo "New version: ${{ steps.package-version.outputs.PACKAGE_VERSION }}"
          exit 1
        else
          echo "New version created: ${{ steps.package-version.outputs.new_version }}"
        fi
    
    - name: Publish
      run: ${{ inputs.publish_command }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Set job summary
      run: |
        echo "## Package Version" >> $GITHUB_STEP_SUMMARY
        echo "- Version: ${{ steps.package-version.outputs.PACKAGE_VERSION }}" >> $GITHUB_STEP_SUMMARY

  merge-release-down-to-prerelease-branch:
    name: Merge release branch down to pre-release branch
    runs-on: ubuntu-latest
    needs: publish
    if: ${{ inputs.release_branch_name == github.ref_name }}
    permissions:
      contents: write
      pull-requests: write

    steps:
    - name: Merge main into dev with pull request
      id: merge_dev
      run: |
        release_branch_name=${{ inputs.release_branch_name }}
        pre_branch_name=${{ inputs.pre_release_branch_name }}
        gh pr create --base $pre_branch_name --head $release_branch_name --title "Merge $release_branch_name into $pre_release_branch_name after release" --body "Merging $release_branch_name into $pre_branch_name" --assignee ${{ github.actor }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
